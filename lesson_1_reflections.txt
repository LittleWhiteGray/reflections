How did viewing a diff between two versions of a file help you see the bug that was introduced?
- As diff highlights the different lines between two versions, we only need
to check those parts, instead of the whole file.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
- You can switch back to an old version easily if any buy or exceptional condition happens.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
- Pros: you have the control over the time, you can save as you need, like after adding one new feature, fixing one bug or a typo.
- Cons: It depends on whether you can determine the right time to commit.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
- When those files are related and changed together.

How can you use the commands git log and git diff to view the history of files?
- git log allows you to view the history of commits.
  git diff v1 v2 allows you to compare v1 with v2, which highlights the difference.

How might using version control make you more confident to make changes that could break something?
- You can always checkout to older versions.

Now that you have your workspace set up, what do you want to try using Git for?
- Learn some basic skills before doing the actual work.
